services:
  # PostgreSQL Database
  postgres:
    image: docker.1ms.run/postgres:15-alpine
    container_name: ai_eval_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ai_eval_platform
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ai_eval_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery broker
  redis:
    image: docker.1ms.run/redis:7-alpine
    container_name: ai_eval_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai_eval_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build: .
    container_name: ai_eval_backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
        - action: rebuild
          path: requirements.txt
    volumes:
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - SECRET_KEY=uO2yT88wJart935q6ayg2J65g1a2buNbYf4d3jTqg7Y=
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ai_eval_platform
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_eval_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build: .
    container_name: ai_eval_celery_worker
    command: celery -A app.celery_config:celery_app worker --loglevel=info --concurrency=4 -Q test_queue,health_queue,cleanup_queue
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
        - action: rebuild
          path: requirements.txt
    volumes:
      - ./uploads:/app/uploads
    environment:
      - PYTHONPATH=/app
      - SECRET_KEY=uO2yT88wJart935q6ayg2J65g1a2buNbYf4d3jTqg7Y=
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ai_eval_platform
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_eval_network
    restart: unless-stopped

  # Celery Beat (Task Scheduler)
  celery-beat:
    build: .
    container_name: ai_eval_celery_beat
    command: celery -A app.celery_config:celery_app beat --loglevel=info
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
        - action: rebuild
          path: requirements.txt
    volumes:
      - ./uploads:/app/uploads
    environment:
      - PYTHONPATH=/app
      - SECRET_KEY=uO2yT88wJart935q6ayg2J65g1a2buNbYf4d3jTqg7Y=
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ai_eval_platform
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_eval_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: docker.1ms.run/nginx:alpine
    container_name: ai_eval_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      backend:
        condition: service_healthy
      flower:
        condition: service_healthy
    networks:
      - ai_eval_network
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build: .
    container_name: ai_eval_flower
    command: celery -A app.celery_config:celery_app flower --port=5555
    ports:
      - "5555:5555"
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
        - action: rebuild
          path: requirements.txt
    environment:
      - PYTHONPATH=/app
      - SECRET_KEY=uO2yT88wJart935q6ayg2J65g1a2buNbYf4d3jTqg7Y=
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - ai_eval_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  ai_eval_network:
    driver: bridge